Question: Alternatively, to compare items in the cart, instead of using Comparator, we can use the Comparable interface and override the compareTo()method. You can refer to the Java docs to see the information of this interface.
Suppose we are taking this Comparable interface approach.


- What class should implement the Comparable interface?
	Comparable<T> interface provides 1 instance method, that is compareTo(T obj), used to compare the object of the class implementing this interface with another object of the same class -> Comparable should be implemented by the exact class that requires comparison, here being the Media class.


- In those classes, how should you implement the compareTo() method be to reflect the ordering that we want?
+ For sorting by title then cost: 
	First sort by title in ascending order: this.title.compareToIgnoreCase(other.getTitle())
	Then if the above method returns 0, i.e., the titles are the same, sort by cost in descending order: other.getCost() - this.cost
	and return the integer value of the cost difference.
	Otherwise return the value of the string comparison method.
+ For sorting by cost then title:
	Do the opposite of the above order: First calculate other.getCost() - this.cost
	If = 0 then sort by title: this.title.compareToIgnoreCase(other.getTitle()) and return
	If != 0 then return value.


- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
	Comparable interface only provides 1 compare method for implementation, therefore we can only implement one ordering rule, whereas Comparator interface allows implementation of an external comparing/ordering rule to be passed into a sorting method and so allowing multiple rules to be created.


- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
	Using Comparator interface would be unfavorable as we have to re-implement the class implementing Comparator, however using Comparable interface allows for overriding the compareTo() method in the DVD class inherited from its superclass.
	To allow a different ordering rule for DVDs:
	- I will specify the ordering rule of by title then cost for all media types, and implement the Comparable interface in Media class with the compareTo() method as mentioned in previous questions. 
	- Then, in the DVD class, I will override the compareTo() method to include the criteria of length in the sorting process: check for other.getLength() - this.getLength() (decreasing order); if = 0 then check for order by cost; else return the value.